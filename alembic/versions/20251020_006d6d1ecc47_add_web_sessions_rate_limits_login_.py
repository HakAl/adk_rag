"""add_web_sessions_rate_limits_login_attempts

Revision ID: 006d6d1ecc47
Revises: c982fbebe015
Create Date: 2025-10-20 16:03:40.077460+00:00

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '006d6d1ecc47'
down_revision = 'c982fbebe015'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)

    op.create_table('login_attempts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('client_id', sa.String(), nullable=False),
    sa.Column('username_or_email', sa.String(), nullable=False),
    sa.Column('failed_count', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('last_attempt', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_login_attempts_client', 'login_attempts', ['client_id'], unique=False)
    op.create_index(op.f('ix_login_attempts_client_id'), 'login_attempts', ['client_id'], unique=False)
    op.create_index('ix_login_attempts_locked_until', 'login_attempts', ['locked_until'], unique=False)
    op.create_table('rate_limits',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('client_id', sa.String(), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=False),
    sa.Column('request_count', sa.Integer(), nullable=False),
    sa.Column('window_start', sa.DateTime(), nullable=False),
    sa.Column('last_request', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_rate_limits_client_endpoint', 'rate_limits', ['client_id', 'endpoint'], unique=False)
    op.create_index(op.f('ix_rate_limits_client_id'), 'rate_limits', ['client_id'], unique=False)
    op.create_index('ix_rate_limits_window_start', 'rate_limits', ['window_start'], unique=False)

    # Create web_sessions table - only add FK to sessions if sessions table exists
    if 'sessions' in inspector.get_table_names():
        op.create_table('web_sessions',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('chat_session_id', sa.String(), nullable=True),
        sa.Column('csrf_token', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('last_activity', sa.DateTime(), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['chat_session_id'], ['sessions.session_id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    else:
        # Create without FK to sessions if sessions table doesn't exist
        op.create_table('web_sessions',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('chat_session_id', sa.String(), nullable=True),
        sa.Column('csrf_token', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('last_activity', sa.DateTime(), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id')
        )

    op.create_index(op.f('ix_web_sessions_user_id'), 'web_sessions', ['user_id'], unique=False)

    # Check if constraint exists before dropping
    constraints = [c['name'] for c in inspector.get_unique_constraints('api_tokens')]
    if 'api_tokens_token_hash_key' in constraints:
        op.drop_constraint('api_tokens_token_hash_key', 'api_tokens', type_='unique')

    # Check if old index exists before dropping
    indexes = [idx['name'] for idx in inspector.get_indexes('api_tokens')]
    if 'idx_api_tokens_token_hash' in indexes:
        op.drop_index('idx_api_tokens_token_hash', table_name='api_tokens')

    # Create new index if it doesn't exist
    if 'ix_api_tokens_token_hash' not in indexes:
        op.create_index(op.f('ix_api_tokens_token_hash'), 'api_tokens', ['token_hash'], unique=True)

    # Only modify sessions indexes if sessions table exists
    if 'sessions' in inspector.get_table_names():
        indexes = [idx['name'] for idx in inspector.get_indexes('sessions')]
        if 'idx_sessions_user_id' in indexes:
            op.drop_index('idx_sessions_user_id', table_name='sessions')
        if 'ix_sessions_user_id' not in indexes:
            columns = [col['name'] for col in inspector.get_columns('sessions')]
            if 'user_id' in columns:
                op.create_index(op.f('ix_sessions_user_id'), 'sessions', ['user_id'], unique=False)

    # Check and drop/recreate users indexes and constraints
    user_indexes = [idx['name'] for idx in inspector.get_indexes('users')]
    user_constraints = [c['name'] for c in inspector.get_unique_constraints('users')]

    if 'idx_users_email' in user_indexes:
        op.drop_index('idx_users_email', table_name='users')
    if 'idx_users_username' in user_indexes:
        op.drop_index('idx_users_username', table_name='users')
    if 'users_email_key' in user_constraints:
        op.drop_constraint('users_email_key', 'users', type_='unique')
    if 'users_username_key' in user_constraints:
        op.drop_constraint('users_username_key', 'users', type_='unique')

    if 'ix_users_email' not in user_indexes:
        op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    if 'ix_users_username' not in user_indexes:
        op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)

    user_indexes = [idx['name'] for idx in inspector.get_indexes('users')]
    user_constraints = [c['name'] for c in inspector.get_unique_constraints('users')]

    if 'ix_users_username' in user_indexes:
        op.drop_index(op.f('ix_users_username'), table_name='users')
    if 'ix_users_email' in user_indexes:
        op.drop_index(op.f('ix_users_email'), table_name='users')

    if 'users_username_key' not in user_constraints:
        op.create_unique_constraint('users_username_key', 'users', ['username'], postgresql_nulls_not_distinct=False)
    if 'users_email_key' not in user_constraints:
        op.create_unique_constraint('users_email_key', 'users', ['email'], postgresql_nulls_not_distinct=False)

    if 'idx_users_username' not in user_indexes:
        op.create_index('idx_users_username', 'users', ['username'], unique=False)
    if 'idx_users_email' not in user_indexes:
        op.create_index('idx_users_email', 'users', ['email'], unique=False)

    if 'sessions' in inspector.get_table_names():
        indexes = [idx['name'] for idx in inspector.get_indexes('sessions')]
        if 'ix_sessions_user_id' in indexes:
            op.drop_index(op.f('ix_sessions_user_id'), table_name='sessions')
        if 'idx_sessions_user_id' not in indexes:
            op.create_index('idx_sessions_user_id', 'sessions', ['user_id'], unique=False)

    indexes = [idx['name'] for idx in inspector.get_indexes('api_tokens')]
    if 'ix_api_tokens_token_hash' in indexes:
        op.drop_index(op.f('ix_api_tokens_token_hash'), table_name='api_tokens')
    if 'idx_api_tokens_token_hash' not in indexes:
        op.create_index('idx_api_tokens_token_hash', 'api_tokens', ['token_hash'], unique=False)

    constraints = [c['name'] for c in inspector.get_unique_constraints('api_tokens')]
    if 'api_tokens_token_hash_key' not in constraints:
        op.create_unique_constraint('api_tokens_token_hash_key', 'api_tokens', ['token_hash'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_web_sessions_user_id'), table_name='web_sessions')
    op.drop_table('web_sessions')
    op.drop_index('ix_rate_limits_window_start', table_name='rate_limits')
    op.drop_index(op.f('ix_rate_limits_client_id'), table_name='rate_limits')
    op.drop_index('ix_rate_limits_client_endpoint', table_name='rate_limits')
    op.drop_table('rate_limits')
    op.drop_index('ix_login_attempts_locked_until', table_name='login_attempts')
    op.drop_index(op.f('ix_login_attempts_client_id'), table_name='login_attempts')
    op.drop_index('ix_login_attempts_client', table_name='login_attempts')
    op.drop_table('login_attempts')
    # ### end Alembic commands ###